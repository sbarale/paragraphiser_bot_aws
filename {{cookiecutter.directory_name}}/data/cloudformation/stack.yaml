AWSTemplateFormatVersion: 2010-09-09
Parameters:
      botname:
          Type: String
          Description: Name of the reddit bot
      stage:
          Type: String
          Description: Deployment stage (dev vs prod)
      codebucket:
          Type: String
          Description: S3 bucket where lambda code should be saved
      checkForNewS3Version:
          Type: String
          Description: Version of the zip for checkForNew
      checkOldOneS3Version:
          Type: String
          Description: Version of the zip for checkOldOne
      pollS3Version:
          Type: String
          Description: Version of the zip for poll
      errorHandlerS3Version:
          Type: String
          Description: Version of the zip for errorHandler
      failerS3Version:
          Type: String
          Description: Version of the zip for failerHandler


Resources:
      ExecutionRole:
          Type: "AWS::IAM::Role"
          Properties:
             Path : "/"
             RoleName: !Join [ "-", [ "exec", !Ref "botname"] ]
             Policies:
              - PolicyName: "CloudwatchLogs"
                PolicyDocument:
                   Version   : "2012-10-17"
                   Statement :
                      - Action:
                           - cloudwatch:*
                           - logs:*
                        Resource: "*"
                        Effect: Allow
              - PolicyName: "S3"
                PolicyDocument:
                  Version  :  "2012-10-17"
                  Statement:
                     - Action:
                           - "s3:*"
                       Resource:
                           - "*"
                       Effect: Allow
                     - Action:
                           - "s3:Get*"
                           - "s3:ListBucket"
                       Resource:
                           - "arn:aws:s3:::*"
                       Effect: Allow
                     - Action:
                           - s3:ReplicateObject
                           - s3:ReplicateDelete
                           - s3:ReplicateTags
                           - s3:GetObjectVersionTagging
                       Resource:
                           - "arn:aws:s3:::tenergy-summary-b/*"
                       Effect: Allow
              - PolicyName: "SQS"
                PolicyDocument:
                  Statement:
                    - Action:
                           - sqs:*
                      Resource:
                           - "*"
                      Effect: Allow
              - PolicyName: "SNS_SMS"
                PolicyDocument:
                  Statement:
                    - Action:
                           - SNS:Publish
                      Resource:
                           - "*"
                      Effect: Allow
              - PolicyName: "Cloudformation_Read_Only"
                PolicyDocument:
                  Statement:
                    - Action:
                           - cloudformation:DescribeStacks
                      Resource:
                           - "*"
                      Effect: Allow
              - PolicyName: "DynamoDB"
                PolicyDocument:
                  Statement:
                    - Action:
                           - dynamodb:*
                      Resource:
                           - "*"
                      Effect: "Allow"
              - PolicyName: "Lambda"
                PolicyDocument:
                  Statement:
                    - Action:
                           - lambda:*
                      Resource:
                           - "*"
                      Effect: "Allow"
             AssumeRolePolicyDocument :
                Statement:
                   - Action:
                         -  "sts:AssumeRole"
                     Effect: Allow
                     Principal:
                         Service: [ "lambda.amazonaws.com" ]
                   - Action:
                         -  "sts:AssumeRole"
                     Effect: Allow
                     Principal:
                         Service: [ "sns.amazonaws.com" ]
                   - Action:
                         -  "sts:AssumeRole"
                     Effect: Allow
                     Principal:
                         Service: [ "logs.ap-southeast-2.amazonaws.com" ]
                   - Action:
                         -  "sts:AssumeRole"
                     Effect: Allow
                     Principal:
                         Service: [ "events.amazonaws.com" ]

      # this table contains data about each post that was at some point eligible
      postHistoryTable:
                Type: "AWS::DynamoDB::Table"
                Properties:
                   AttributeDefinitions:
                       - AttributeName: "post_id"
                         AttributeType: "S"
                   KeySchema:
                       - AttributeName: "post_id"
                         KeyType:       "HASH"
                   ProvisionedThroughput:
                         ReadCapacityUnits: 5
                         WriteCapacityUnits: 5

      # this table contains a list of timestamps for the future, and post ids
      # at those times we will go back and check the original post and our comment
      scheduleTable:
                Type: "AWS::DynamoDB::Table"
                Properties:
                   AttributeDefinitions:
                       - AttributeName: "hash"
                         AttributeType: "S"
                       - AttributeName: "time"
                         AttributeType: "N"
                   KeySchema:
                       # Apparently you can't have a dynamo table with just a
                       # sort key. So I'll add a hash key, which will only have
                       # one value of 0
                       - AttributeName: "hash"
                         KeyType:       "HASH"
                       - AttributeName: "time"
                         KeyType:       "RANGE"
                   ProvisionedThroughput:
                         ReadCapacityUnits: 5
                         WriteCapacityUnits: 5

      #######################
      # checkForNew
      # this lambda will poll reddit for new posts and comment if eligible
      #######################
      triggerCheckForNew:
          Type: "AWS::Events::Rule"
          Properties:
              Description: "ScheduledRule"
              ScheduleExpression: "rate(10 minutes)"
              State: "ENABLED"
              Targets:
                -
                  Arn:
                     Fn::GetAtt: ["checkForNew", "Arn"]
                  Id: "trigger_checkForNew"
      permitTriggerCheckForNew:
          Type: "AWS::Lambda::Permission"
          Properties:
             FunctionName:
                Ref: "checkForNew"
             Action: "lambda:InvokeFunction"
             Principal: "events.amazonaws.com"
             SourceArn:
                Fn::GetAtt: [ "triggerCheckForNew", "Arn"]
      checkForNew:
          Type: AWS::Lambda::Function
          Properties:
            #FunctionName: !Join [ "-", [ !Ref "botname", "checkForNew"] ]
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: !Join [ "/", [ !Ref "stage", "checkForNew.zip"] ]
              S3ObjectVersion: !Ref "checkForNewS3Version"
            Handler: main.lambda_handler
            Runtime: python3.9
            Timeout: 300
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
            Environment:
                Variables:
                   num_to_scan: 50
                   schedule_table:
                       Ref: "scheduleTable"
                   post_history_table:
                       Ref: "postHistoryTable"
                   bot_name:
                       Ref: "botname"
                   subreddits:
                       "bottest" # comma seperated, no "r/" prefix
      errorAlarmCheckForNew:
         Type: "AWS::CloudWatch::Alarm"
         Properties:
           ActionsEnabled: True # not sure
           AlarmDescription:
               "Function checkForNew failed. Unable to check whether new posts are eligible"
           AlarmActions:
               - Ref: "unfilteredErrorTopic"
           ComparisonOperator: "GreaterThanOrEqualToThreshold"
           EvaluationPeriods: 1
           MetricName: "Errors"
           Namespace: "AWS/Lambda"
           Dimensions:
               - Name: "FunctionName"
                 Value: 
                     Ref: "checkForNew"
           Period: 60 # minimum
           Statistic: Sum
           Threshold: 1
           TreatMissingData: "notBreaching"

      #######################
      # poll
      # this lambda will poll dynamodb every 15 minutes
      # then will take all timestamps <= 15 minutes into the future,
      # and invoke one lambda per post to check up on our past comments
      #######################
      triggerPoll:
          Type: "AWS::Events::Rule"
          Properties:
              Description: "ScheduledRule"
              ScheduleExpression: "rate(1 minute)"
              State: "ENABLED"
              Targets:
                -
                  Arn:
                     Fn::GetAtt: ["poll", "Arn"]
                  Id: "trigger_poll"
      permitTriggerPoll:
          Type: "AWS::Lambda::Permission"
          Properties:
             FunctionName:
                Ref: "poll"
             Action: "lambda:InvokeFunction"
             Principal: "events.amazonaws.com"
             SourceArn:
                Fn::GetAtt: [ "triggerPoll", "Arn"]
      poll:
          Type: AWS::Lambda::Function
          Properties:
            #FunctionName: !Join [ "-", [ !Ref "botname", "poll"] ]
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: !Join [ "/", [ !Ref "stage", "poll.zip"] ]
              S3ObjectVersion: !Ref "pollS3Version"
            Handler: main.lambda_handler
            Runtime: python3.6
            Timeout: 300
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
            Environment:
                Variables:
                   post_history_table:
                       Ref: "postHistoryTable"
                   schedule_table:
                       Ref: "scheduleTable"
                   bot_name:
                       Ref "botname"
                   checkOldArn:
                       Fn::GetAtt: ["checkOldOne", "Arn"]
      errorAlarmPoll:
         Type: "AWS::CloudWatch::Alarm"
         Properties:
           ActionsEnabled: True # not sure
           AlarmDescription:
               "Function poll failed. Unable to schedule checks for previous comments by this bot"
           AlarmActions:
               - Ref: "unfilteredErrorTopic"
           ComparisonOperator: "GreaterThanOrEqualToThreshold"
           EvaluationPeriods: 1
           MetricName: "Errors"
           Namespace: "AWS/Lambda"
           Dimensions:
               - Name: "FunctionName"
                 Value: 
                     Ref: "poll"
           Period: 60 # minimum
           Statistic: Sum
           Threshold: 1
           TreatMissingData: "notBreaching"

      #######################
      # checkOldOne
      # This function checks posts that were eligible to see if they
      # still are, and what reaction we've got to our post
      #######################
      checkOldOne:
          Type: AWS::Lambda::Function
          Properties:
            #FunctionName: !Join [ "-", [ !Ref "botname", "checkOldOne"] ]
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: !Join [ "/", [ !Ref "stage", "checkOldOne.zip"] ]
              S3ObjectVersion: !Ref "checkOldOneS3Version"
            Handler: main.lambda_handler
            Runtime: python3.6
            Timeout: 300
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
            Environment:
                Variables:
                   post_history_table:
                       Ref: "postHistoryTable"
                   filtered_error_topic:
                       Ref: "filteredErrorTopic"
                   bot_name:
                       Ref: "botname"
      errorAlarmCheckOldOne:
         Type: "AWS::CloudWatch::Alarm"
         Properties:
           ActionsEnabled: True # not sure
           AlarmDescription:
               "Function checkOldOne failed. Unable to check reaction to a previous comment by this bot"
           AlarmActions:
               - Ref: "unfilteredErrorTopic"
           ComparisonOperator: "GreaterThanOrEqualToThreshold"
           EvaluationPeriods: 1
           MetricName: "Errors"
           Namespace: "AWS/Lambda"
           Dimensions:
               - Name: "FunctionName"
                 Value: 
                     Ref: "checkOldOne"
           Period: 60 # minimum
           Statistic: Sum
           Threshold: 1
           TreatMissingData: "notBreaching"

      #######################
      # errorHandler
      # If any lambda fails, this will send you a text message
      # with sensible logic applied
      #######################
      errorHandler:
          Type: AWS::Lambda::Function
          Properties:
            #FunctionName: !Join [ "-", [ !Ref "botname", "errorHandler"] ]
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: !Join [ "/", [ !Ref "stage", "errorHandler.zip"] ]
              S3ObjectVersion: !Ref "errorHandlerS3Version"
            Handler: main.lambda_handler
            Runtime: python3.6
            Timeout: 60
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
            Environment:
                Variables:
                   bot_name:
                       Ref: "botname"   
                   error_table:
                       Ref: "errorHistoryTable"
                   stack_name:
                       Ref: "AWS::StackName"
                   filtered_error_topic:
                       Ref: "filteredErrorTopic"
      failer:
          Type: AWS::Lambda::Function
          Properties:
            #FunctionName: !Join [ "-", [ !Ref "botname", "failer"] ]
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: !Join [ "/", [ !Ref "stage", "failer.zip"] ]
              S3ObjectVersion: !Ref "failerS3Version"
            Handler: main.lambda_handler
            Runtime: python3.6
            Timeout: 60
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
      errorAlarmFailer:
         Type: "AWS::CloudWatch::Alarm"
         Properties:
           ActionsEnabled: True # not sure
           AlarmDescription:
               "Function failer. test failure"
           AlarmActions:
               - Ref: "unfilteredErrorTopic"
           ComparisonOperator: "GreaterThanOrEqualToThreshold"
           EvaluationPeriods: 1
           MetricName: "Errors"
           Namespace: "AWS/Lambda"
           Dimensions:
               - Name: "FunctionName"
                 Value: 
                     Ref: "failer"
           Period: 60 # minimum
           Statistic: Sum
           Threshold: 1
           TreatMissingData: "notBreaching"

      unfilteredErrorTopic:
          Type: "AWS::SNS::Topic"
          Properties:
              Subscription:
                 - Endpoint:
                       "Fn::GetAtt": ["errorHandler", "Arn"]
                   Protocol:
                       "lambda"
          DependsOn:
              - "errorHandler"        
      permitTriggerErrorHandler:
          Type: "AWS::Lambda::Permission"
          Properties:
             FunctionName:
                "Fn::GetAtt": ["errorHandler", "Arn"]
             Action: "lambda:InvokeFunction"
             Principal: "sns.amazonaws.com"
             SourceArn:
                Ref: "unfilteredErrorTopic"
          DependsOn:
              - "errorHandler"
              - "unfilteredErrorTopic"
      # if something goes wrong, we send an sms
      # but don't send a second message for the same error until after the stack is updated
      # this table stores that information
      errorHistoryTable:
                Type: "AWS::DynamoDB::Table"
                Properties:
                   AttributeDefinitions:
                       - AttributeName: "error" # can't have a table with just a sort
                         AttributeType: "S"
                       - AttributeName: "stackUpdateTime"
                         AttributeType: "N"
                   KeySchema:
                       - AttributeName: "error"
                         KeyType:       "HASH"
                       - AttributeName: "stackUpdateTime"
                         KeyType:       "RANGE"
                   ProvisionedThroughput:
                         ReadCapacityUnits: 5
                         WriteCapacityUnits: 5
      filteredErrorTopic:
          Type: "AWS::SNS::Topic"
          Properties:
              Subscription:
                 - Endpoint:
                       "{{cookiecutter.email_for_alerts}}"
                   Protocol:
                       "email"
